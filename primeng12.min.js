"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PickListModule = exports.PickList = void 0;

var i0 = _interopRequireWildcard(require("@angular/core"));

var i3 = _interopRequireWildcard(require("@angular/common"));

var i4 = _interopRequireWildcard(require("primeng/button"));

var i1 = _interopRequireWildcard(require("primeng/api"));

var _dom = require("primeng/dom");

var i5 = _interopRequireWildcard(require("primeng/ripple"));

var i2 = _interopRequireWildcard(require("@angular/cdk/drag-drop"));

var _utils = require("primeng/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class PickList {
  constructor(e, t, i) {
    this.el = e, this.cd = t, this.filterService = i, this.trackBy = (e, t) => t, this.showSourceFilter = !0, this.showTargetFilter = !0, this.metaKeySelection = !0, this.dragdrop = !1, this.showSourceControls = !0, this.showTargetControls = !0, this.disabled = !1, this.filterMatchMode = "contains", this.breakpoint = "960px", this.onMoveToSource = new i0.EventEmitter(), this.onMoveAllToSource = new i0.EventEmitter(), this.onMoveAllToTarget = new i0.EventEmitter(), this.onMoveToTarget = new i0.EventEmitter(), this.onSourceReorder = new i0.EventEmitter(), this.onTargetReorder = new i0.EventEmitter(), this.onSourceSelect = new i0.EventEmitter(), this.onTargetSelect = new i0.EventEmitter(), this.onSourceFilter = new i0.EventEmitter(), this.onTargetFilter = new i0.EventEmitter(), this.selectedItemsSource = [], this.selectedItemsTarget = [], this.id = (0, _utils.UniqueComponentId)(), this.SOURCE_LIST = -1, this.TARGET_LIST = 1;
  }

  ngOnInit() {
    this.responsive && this.createStyle();
  }

  ngAfterContentInit() {
    this.templates.forEach(e => {
      switch (e.getType()) {
        case "item":
          this.itemTemplate = e.template;
          break;

        case "sourceHeader":
          this.sourceHeaderTemplate = e.template;
          break;

        case "targetHeader":
          this.targetHeaderTemplate = e.template;
          break;

        case "emptymessagesource":
          this.emptyMessageSourceTemplate = e.template;
          break;

        case "emptyfiltermessagesource":
          this.emptyFilterMessageSourceTemplate = e.template;
          break;

        case "emptymessagetarget":
          this.emptyMessageTargetTemplate = e.template;
          break;

        case "emptyfiltermessagetarget":
          this.emptyFilterMessageTargetTemplate = e.template;
          break;

        default:
          this.itemTemplate = e.template;
      }
    });
  }

  ngAfterViewChecked() {
    if (this.movedUp || this.movedDown) {
      var t = _dom.DomHandler.find(this.reorderedListElement, "li.p-highlight");

      let e;
      e = this.movedUp ? t[0] : t[t.length - 1], _dom.DomHandler.scrollInView(this.reorderedListElement, e), this.movedUp = !1, this.movedDown = !1, this.reorderedListElement = null;
    }
  }

  onItemClick(e, t, i, r) {
    var s, l, o;
    this.disabled || (l = -1 != (s = this.findIndexInSelection(t, i)), !this.itemTouched && this.metaKeySelection ? (o = e.metaKey || e.ctrlKey || e.shiftKey, l && o ? i.splice(s, 1) : (o || (i.length = 0), i.push(t))) : l ? i.splice(s, 1) : i.push(t), r.emit({
      originalEvent: e,
      items: i
    }), this.itemTouched = !1);
  }

  onSourceItemDblClick() {
    this.disabled || this.moveRight();
  }

  onTargetItemDblClick() {
    this.disabled || this.moveLeft();
  }

  onFilter(e, t, i) {
    e = e.target.value.trim().toLocaleLowerCase(this.filterLocale);
    i === this.SOURCE_LIST ? this.filterValueSource = e : i === this.TARGET_LIST && (this.filterValueTarget = e), this.filter(t, i);
  }

  filter(e, t) {
    var i = this.filterBy.split(",");
    t === this.SOURCE_LIST ? (this.visibleOptionsSource = this.filterService.filter(e, i, this.filterValueSource, this.filterMatchMode, this.filterLocale), this.onSourceFilter.emit({
      query: this.filterValueSource,
      value: this.visibleOptionsSource
    })) : t === this.TARGET_LIST && (this.visibleOptionsTarget = this.filterService.filter(e, i, this.filterValueTarget, this.filterMatchMode, this.filterLocale), this.onTargetFilter.emit({
      query: this.filterValueTarget,
      value: this.visibleOptionsTarget
    }));
  }

  isItemVisible(e, t) {
    return t == this.SOURCE_LIST ? this.isVisibleInList(this.visibleOptionsSource, e, this.filterValueSource) : this.isVisibleInList(this.visibleOptionsTarget, e, this.filterValueTarget);
  }

  isEmpty(e) {
    return e == this.SOURCE_LIST ? this.filterValueSource ? !this.visibleOptionsSource || 0 === this.visibleOptionsSource.length : !this.source || 0 === this.source.length : this.filterValueTarget ? !this.visibleOptionsTarget || 0 === this.visibleOptionsTarget.length : !this.target || 0 === this.target.length;
  }

  isVisibleInList(t, i, e) {
    if (!e || !e.trim().length) return !0;

    for (let e = 0; e < t.length; e++) if (i == t[e]) return !0;
  }

  onItemTouchEnd() {
    this.disabled || (this.itemTouched = !0);
  }

  sortByIndexInList(e, i) {
    return e.sort((e, t) => _utils.ObjectUtils.findIndexInList(e, i) - _utils.ObjectUtils.findIndexInList(t, i));
  }

  moveUp(e, t, i, r, s) {
    if (i && i.length) {
      i = this.sortByIndexInList(i, t);

      for (let e = 0; e < i.length; e++) {
        var l = i[e],
            o = _utils.ObjectUtils.findIndexInList(l, t);

        if (0 == o) break;
        var n = t[o],
            l = t[o - 1];
        t[o - 1] = n, t[o] = l;
      }

      this.dragdrop && (this.filterValueSource && s === this.SOURCE_LIST || this.filterValueTarget && s === this.TARGET_LIST) && this.filter(t, s), this.movedUp = !0, this.reorderedListElement = e, r.emit({
        items: i
      });
    }
  }

  moveTop(e, t, i, r, s) {
    if (i && i.length) {
      i = this.sortByIndexInList(i, t);

      for (let e = 0; e < i.length; e++) {
        var l = i[e],
            l = _utils.ObjectUtils.findIndexInList(l, t);

        if (0 == l) break;
        l = t.splice(l, 1)[0];
        t.unshift(l);
      }

      this.dragdrop && (this.filterValueSource && s === this.SOURCE_LIST || this.filterValueTarget && s === this.TARGET_LIST) && this.filter(t, s), e.scrollTop = 0, r.emit({
        items: i
      });
    }
  }

  moveDown(e, t, i, r, s) {
    if (i && i.length) {
      for (let e = (i = this.sortByIndexInList(i, t)).length - 1; 0 <= e; e--) {
        var l = i[e],
            o = _utils.ObjectUtils.findIndexInList(l, t);

        if (o == t.length - 1) break;
        var n = t[o],
            l = t[o + 1];
        t[o + 1] = n, t[o] = l;
      }

      this.dragdrop && (this.filterValueSource && s === this.SOURCE_LIST || this.filterValueTarget && s === this.TARGET_LIST) && this.filter(t, s), this.movedDown = !0, this.reorderedListElement = e, r.emit({
        items: i
      });
    }
  }

  moveBottom(e, t, i, r, s) {
    if (i && i.length) {
      for (let e = (i = this.sortByIndexInList(i, t)).length - 1; 0 <= e; e--) {
        var l = i[e],
            l = _utils.ObjectUtils.findIndexInList(l, t);

        if (l == t.length - 1) break;
        l = t.splice(l, 1)[0];
        t.push(l);
      }

      this.dragdrop && (this.filterValueSource && s === this.SOURCE_LIST || this.filterValueTarget && s === this.TARGET_LIST) && this.filter(t, s), e.scrollTop = e.scrollHeight, r.emit({
        items: i
      });
    }
  }

  moveRight() {
    if (this.selectedItemsSource && this.selectedItemsSource.length) {
      for (let e = 0; e < this.selectedItemsSource.length; e++) {
        var t = this.selectedItemsSource[e];
        -1 == _utils.ObjectUtils.findIndexInList(t, this.target) && (this.target.push(this.source.splice(_utils.ObjectUtils.findIndexInList(t, this.source), 1)[0]), this.visibleOptionsSource && this.visibleOptionsSource.splice(_utils.ObjectUtils.findIndexInList(t, this.visibleOptionsSource), 1));
      }

      this.onMoveToTarget.emit({
        items: this.selectedItemsSource
      }), this.selectedItemsSource = [], this.filterValueTarget && this.filter(this.target, this.TARGET_LIST);
    }
  }

  moveAllRight() {
    if (this.source) {
      let t = [];

      for (let e = 0; e < this.source.length; e++) {
        var i;
        this.isItemVisible(this.source[e], this.SOURCE_LIST) && (i = this.source.splice(e, 1)[0], this.target.push(i), t.push(i), e--);
      }

      this.onMoveAllToTarget.emit({
        items: t
      }), this.selectedItemsSource = [], this.filterValueTarget && this.filter(this.target, this.TARGET_LIST), this.visibleOptionsSource = [];
    }
  }

  moveLeft() {
    if (this.selectedItemsTarget && this.selectedItemsTarget.length) {
      for (let e = 0; e < this.selectedItemsTarget.length; e++) {
        var t = this.selectedItemsTarget[e];
        -1 == _utils.ObjectUtils.findIndexInList(t, this.source) && (this.source.push(this.target.splice(_utils.ObjectUtils.findIndexInList(t, this.target), 1)[0]), this.visibleOptionsTarget && this.visibleOptionsTarget.splice(_utils.ObjectUtils.findIndexInList(t, this.visibleOptionsTarget), 1)[0]);
      }

      this.onMoveToSource.emit({
        items: this.selectedItemsTarget
      }), this.selectedItemsTarget = [], this.filterValueSource && this.filter(this.source, this.SOURCE_LIST);
    }
  }

  moveAllLeft() {
    if (this.target) {
      let t = [];

      for (let e = 0; e < this.target.length; e++) {
        var i;
        this.isItemVisible(this.target[e], this.TARGET_LIST) && (i = this.target.splice(e, 1)[0], this.source.push(i), t.push(i), e--);
      }

      this.onMoveAllToSource.emit({
        items: t
      }), this.selectedItemsTarget = [], this.filterValueSource && this.filter(this.source, this.SOURCE_LIST), this.visibleOptionsTarget = [];
    }
  }

  isSelected(e, t) {
    return -1 != this.findIndexInSelection(e, t);
  }

  findIndexInSelection(e, t) {
    return _utils.ObjectUtils.findIndexInList(e, t);
  }

  onDrop(e, t) {
    var i = e.previousContainer !== e.container,
        r = this.getDropIndexes(e.previousIndex, e.currentIndex, t, i, e.item.data);
    t === this.SOURCE_LIST ? (i ? ((0, i2.transferArrayItem)(e.previousContainer.data, e.container.data, r.previousIndex, r.currentIndex), this.visibleOptionsTarget && this.visibleOptionsTarget.splice(e.previousIndex, 1), this.onMoveToSource.emit({
      items: [e.item.data]
    })) : ((0, i2.moveItemInArray)(e.container.data, r.previousIndex, r.currentIndex), this.onSourceReorder.emit({
      items: [e.item.data]
    })), this.filterValueSource && this.filter(this.source, this.SOURCE_LIST)) : (i ? ((0, i2.transferArrayItem)(e.previousContainer.data, e.container.data, r.previousIndex, r.currentIndex), this.visibleOptionsSource && this.visibleOptionsSource.splice(e.previousIndex, 1), this.onMoveToTarget.emit({
      items: [e.item.data]
    })) : ((0, i2.moveItemInArray)(e.container.data, r.previousIndex, r.currentIndex), this.onTargetReorder.emit({
      items: [e.item.data]
    })), this.filterValueTarget && this.filter(this.target, this.TARGET_LIST));
  }

  getDropIndexes(e, t, i, r, s) {
    let l, o;
    return o = i === this.SOURCE_LIST ? (l = r ? this.filterValueTarget ? _utils.ObjectUtils.findIndexInList(s, this.target) : e : this.filterValueSource ? _utils.ObjectUtils.findIndexInList(s, this.source) : e, this.filterValueSource ? this.findFilteredCurrentIndex(this.visibleOptionsSource, t, this.source) : t) : (l = r ? this.filterValueSource ? _utils.ObjectUtils.findIndexInList(s, this.source) : e : this.filterValueTarget ? _utils.ObjectUtils.findIndexInList(s, this.target) : e, this.filterValueTarget ? this.findFilteredCurrentIndex(this.visibleOptionsTarget, t, this.target) : t), {
      previousIndex: l,
      currentIndex: o
    };
  }

  findFilteredCurrentIndex(e, t, i) {
    return e.length !== t ? _utils.ObjectUtils.findIndexInList(e[t], i) : _utils.ObjectUtils.findIndexInList(e[t - 1], i) + 1;
  }

  resetFilter() {
    this.visibleOptionsSource = null, this.filterValueSource = null, this.visibleOptionsTarget = null, this.filterValueTarget = null, this.sourceFilterViewChild.nativeElement.value = "", this.targetFilterViewChild.nativeElement.value = "";
  }

  onItemKeydown(e, t, i, r) {
    var s = e.currentTarget;

    switch (e.which) {
      case 40:
        var l = this.findNextItem(s);
        l && l.focus(), e.preventDefault();
        break;

      case 38:
        l = this.findPrevItem(s);
        l && l.focus(), e.preventDefault();
        break;

      case 13:
        this.onItemClick(e, t, i, r), e.preventDefault();
    }
  }

  findNextItem(e) {
    e = e.nextElementSibling;
    return e ? !_dom.DomHandler.hasClass(e, "p-picklist-item") || _dom.DomHandler.isHidden(e) ? this.findNextItem(e) : e : null;
  }

  findPrevItem(e) {
    e = e.previousElementSibling;
    return e ? !_dom.DomHandler.hasClass(e, "p-picklist-item") || _dom.DomHandler.isHidden(e) ? this.findPrevItem(e) : e : null;
  }

  createStyle() {
    var e;
    this.styleElement || (this.el.nativeElement.children[0].setAttribute(this.id, ""), this.styleElement = document.createElement("style"), this.styleElement.type = "text/css", document.head.appendChild(this.styleElement), e = `
            @media screen and (max-width: ${this.breakpoint}) {
                .p-picklist[${this.id}] {
                    flex-direction: column;
                }

                .p-picklist[${this.id}] .p-picklist-buttons {
                    padding: var(--content-padding);
                    flex-direction: row;
                }

                .p-picklist[${this.id}] .p-picklist-buttons .p-button {
                    margin-right: var(--inline-spacing);
                    margin-bottom: 0;
                }

                .p-picklist[${this.id}] .p-picklist-buttons .p-button:last-child {
                    margin-right: 0;
                }

                .p-picklist[${this.id}] .pi-angle-right:before {
                    content: "\\e930"
                }

                .p-picklist[${this.id}] .pi-angle-double-right:before {
                    content: "\\e92c"
                }

                .p-picklist[${this.id}] .pi-angle-left:before {
                    content: "\\e933"
                }

                .p-picklist[${this.id}] .pi-angle-double-left:before {
                    content: "\\e92f"
                }
            }
            `, this.styleElement.innerHTML = e);
  }

  destroyStyle() {
    this.styleElement && (document.head.removeChild(this.styleElement), this.styleElement = null);
  }

  ngOnDestroy() {
    this.destroyStyle();
  }

}

exports.PickList = PickList;
PickList.ɵfac = i0.ɵɵngDeclareFactory({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickList,
  deps: [{
    token: i0.ElementRef
  }, {
    token: i0.ChangeDetectorRef
  }, {
    token: i1.FilterService
  }],
  target: i0.ɵɵFactoryTarget.Component
}), PickList.ɵcmp = i0.ɵɵngDeclareComponent({
  minVersion: "12.0.0",
  version: "12.0.5",
  type: PickList,
  selector: "p-pickList",
  inputs: {
    source: "source",
    target: "target",
    sourceHeader: "sourceHeader",
    targetHeader: "targetHeader",
    responsive: "responsive",
    filterBy: "filterBy",
    filterLocale: "filterLocale",
    trackBy: "trackBy",
    sourceTrackBy: "sourceTrackBy",
    targetTrackBy: "targetTrackBy",
    showSourceFilter: "showSourceFilter",
    showTargetFilter: "showTargetFilter",
    metaKeySelection: "metaKeySelection",
    dragdrop: "dragdrop",
    style: "style",
    styleClass: "styleClass",
    sourceStyle: "sourceStyle",
    targetStyle: "targetStyle",
    showSourceControls: "showSourceControls",
    showTargetControls: "showTargetControls",
    sourceFilterPlaceholder: "sourceFilterPlaceholder",
    targetFilterPlaceholder: "targetFilterPlaceholder",
    disabled: "disabled",
    ariaSourceFilterLabel: "ariaSourceFilterLabel",
    ariaTargetFilterLabel: "ariaTargetFilterLabel",
    filterMatchMode: "filterMatchMode",
    breakpoint: "breakpoint"
  },
  outputs: {
    onMoveToSource: "onMoveToSource",
    onMoveAllToSource: "onMoveAllToSource",
    onMoveAllToTarget: "onMoveAllToTarget",
    onMoveToTarget: "onMoveToTarget",
    onSourceReorder: "onSourceReorder",
    onTargetReorder: "onTargetReorder",
    onSourceSelect: "onSourceSelect",
    onTargetSelect: "onTargetSelect",
    onSourceFilter: "onSourceFilter",
    onTargetFilter: "onTargetFilter"
  },
  queries: [{
    propertyName: "templates",
    predicate: i1.PrimeTemplate
  }],
  viewQueries: [{
    propertyName: "listViewSourceChild",
    first: !0,
    predicate: ["sourcelist"],
    descendants: !0
  }, {
    propertyName: "listViewTargetChild",
    first: !0,
    predicate: ["targetlist"],
    descendants: !0
  }, {
    propertyName: "sourceFilterViewChild",
    first: !0,
    predicate: ["sourceFilter"],
    descendants: !0
  }, {
    propertyName: "targetFilterViewChild",
    first: !0,
    predicate: ["targetFilter"],
    descendants: !0
  }],
  ngImport: i0,
  template: `
        <div [class]="styleClass" [ngStyle]="style" [ngClass]="'p-picklist p-component'" cdkDropListGroup>
            <div class="p-picklist-buttons p-picklist-source-controls" *ngIf="showSourceControls">
                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
            </div>
            <div class="p-picklist-list-wrapper p-picklist-source-wrapper">
                <div class="p-picklist-header" *ngIf="sourceHeader || sourceHeaderTemplate">
                    <div class="p-picklist-title" *ngIf="!sourceHeaderTemplate">{{sourceHeader}}</div>
                    <ng-container *ngTemplateOutlet="sourceHeaderTemplate"></ng-container>
                </div>
                <div class="p-picklist-filter-container" *ngIf="filterBy && showSourceFilter !== false">
                    <div class="p-picklist-filter">
                        <input #sourceFilter type="text" role="textbox" (keyup)="onFilter($event,source,SOURCE_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="sourceFilterPlaceholder" [attr.aria-label]="ariaSourceFilterLabel">
                        <span class="p-picklist-filter-icon pi pi-search"></span>
                    </div>
                </div>

                <ul #sourcelist class="p-picklist-list p-picklist-source" cdkDropList [cdkDropListData]="source" (cdkDropListDropped)="onDrop($event, SOURCE_LIST)"
                    [ngStyle]="sourceStyle" role="listbox" aria-multiselectable="multiple">
                    <ng-template ngFor let-item [ngForOf]="source" [ngForTrackBy]="sourceTrackBy || trackBy" let-i="index" let-l="last">
                        <li [ngClass]="{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}" pRipple cdkDrag [cdkDragData]="item" [cdkDragDisabled]="!dragdrop"
                            (click)="onItemClick($event,item,selectedItemsSource,onSourceSelect)" (dblclick)="onSourceItemDblClick()" (touchend)="onItemTouchEnd()" (keydown)="onItemKeydown($event,item,selectedItemsSource,onSourceSelect)"
                            *ngIf="isItemVisible(item, SOURCE_LIST)" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsSource)">
                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>
                        </li>
                    </ng-template>
                    <ng-container *ngIf="isEmpty(SOURCE_LIST) && (emptyMessageSourceTemplate || emptyFilterMessageSourceTemplate)">
                        <li class="p-picklist-empty-message" *ngIf="!filterValueSource || !emptyFilterMessageSourceTemplate">
                            <ng-container *ngTemplateOutlet="emptyMessageSourceTemplate"></ng-container>
                        </li>
                        <li class="p-picklist-empty-message" *ngIf="filterValueSource">
                            <ng-container *ngTemplateOutlet="emptyFilterMessageSourceTemplate"></ng-container>
                        </li>
                    </ng-container>
                </ul>
            </div>
            <div class="p-picklist-buttons p-picklist-transfer-buttons">
                <button type="button" pButton pRipple icon="pi pi-angle-right" [disabled]="disabled" (click)="moveRight()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-right" [disabled]="disabled" (click)="moveAllRight()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-left" [disabled]="disabled" (click)="moveLeft()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-left" [disabled]="disabled" (click)="moveAllLeft()"></button>
            </div>
            <div class="p-picklist-list-wrapper p-picklist-target-wrapper">
                <div class="p-picklist-header" *ngIf="targetHeader || targetHeaderTemplate">
                    <div class="p-picklist-title" *ngIf="!targetHeaderTemplate">{{targetHeader}}</div>
                    <ng-container *ngTemplateOutlet="targetHeaderTemplate"></ng-container>
                </div>
                <div class="p-picklist-filter-container" *ngIf="filterBy && showTargetFilter !== false">
                    <div class="p-picklist-filter">
                        <input #targetFilter type="text" role="textbox" (keyup)="onFilter($event,target,TARGET_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="targetFilterPlaceholder" [attr.aria-label]="ariaTargetFilterLabel">
                        <span class="p-picklist-filter-icon pi pi-search"></span>
                    </div>
                </div>
                <ul #targetlist class="p-picklist-list p-picklist-target" cdkDropList [cdkDropListData]="target" (cdkDropListDropped)="onDrop($event, TARGET_LIST)"
                    [ngStyle]="targetStyle" role="listbox" aria-multiselectable="multiple">
                    <ng-template ngFor let-item [ngForOf]="target" [ngForTrackBy]="targetTrackBy || trackBy" let-i="index" let-l="last">
                        <li [ngClass]="{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}" pRipple cdkDrag [cdkDragData]="item" [cdkDragDisabled]="!dragdrop"
                            (click)="onItemClick($event,item,selectedItemsTarget,onTargetSelect)" (dblclick)="onTargetItemDblClick()" (touchend)="onItemTouchEnd()" (keydown)="onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)"
                            *ngIf="isItemVisible(item, TARGET_LIST)" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsTarget)">
                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>
                        </li>
                    </ng-template>
                    <ng-container *ngIf="isEmpty(TARGET_LIST) && (emptyMessageTargetTemplate || emptyFilterMessageTargetTemplate)">
                        <li class="p-picklist-empty-message" *ngIf="!filterValueTarget || !emptyFilterMessageTargetTemplate">
                            <ng-container *ngTemplateOutlet="emptyMessageTargetTemplate"></ng-container>
                        </li>
                        <li class="p-picklist-empty-message" *ngIf="filterValueTarget">
                            <ng-container *ngTemplateOutlet="emptyFilterMessageTargetTemplate"></ng-container>
                        </li>
                    </ng-container>
                </ul>
            </div>
            <div class="p-picklist-buttons p-picklist-target-controls" *ngIf="showTargetControls">
                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
            </div>
        </div>
    `,
  isInline: !0,
  styles: [".p-picklist{display:flex}.p-picklist-buttons{display:flex;flex-direction:column;justify-content:center}.p-picklist-list-wrapper{flex:1 1 50%}.p-picklist-list{list-style-type:none;margin:0;padding:0;overflow:auto;min-height:12rem}.p-picklist-item{display:block;cursor:pointer;overflow:hidden;position:relative}.p-picklist-item:not(.cdk-drag-disabled){cursor:move}.p-picklist-item.cdk-drag-placeholder{opacity:0}.p-picklist-item.cdk-drag-animating{transition:transform .25s cubic-bezier(0,0,.2,1)}.p-picklist-filter{position:relative}.p-picklist-filter-icon{position:absolute;top:50%;margin-top:-.5rem}.p-picklist-filter-input{width:100%}.p-picklist-list.cdk-drop-list-dragging .p-picklist-item:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}"],
  directives: [{
    type: i2.CdkDropListGroup,
    selector: "[cdkDropListGroup]",
    inputs: ["cdkDropListGroupDisabled"],
    exportAs: ["cdkDropListGroup"]
  }, {
    type: i3.NgStyle,
    selector: "[ngStyle]",
    inputs: ["ngStyle"]
  }, {
    type: i3.NgClass,
    selector: "[ngClass]",
    inputs: ["class", "ngClass"]
  }, {
    type: i3.NgIf,
    selector: "[ngIf]",
    inputs: ["ngIf", "ngIfThen", "ngIfElse"]
  }, {
    type: i4.ButtonDirective,
    selector: "[pButton]",
    inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"]
  }, {
    type: i5.Ripple,
    selector: "[pRipple]"
  }, {
    type: i3.NgTemplateOutlet,
    selector: "[ngTemplateOutlet]",
    inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"]
  }, {
    type: i2.CdkDropList,
    selector: "[cdkDropList], cdk-drop-list",
    inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"],
    outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"],
    exportAs: ["cdkDropList"]
  }, {
    type: i3.NgForOf,
    selector: "[ngFor][ngForOf]",
    inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"]
  }, {
    type: i2.CdkDrag,
    selector: "[cdkDrag]",
    inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"],
    outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"],
    exportAs: ["cdkDrag"]
  }],
  changeDetection: i0.ChangeDetectionStrategy.OnPush,
  encapsulation: i0.ViewEncapsulation.None
}), i0.ɵɵngDeclareClassMetadata({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickList,
  decorators: [{
    type: i0.Component,
    args: [{
      selector: "p-pickList",
      template: `
        <div [class]="styleClass" [ngStyle]="style" [ngClass]="'p-picklist p-component'" cdkDropListGroup>
            <div class="p-picklist-buttons p-picklist-source-controls" *ngIf="showSourceControls">
                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)"></button>
            </div>
            <div class="p-picklist-list-wrapper p-picklist-source-wrapper">
                <div class="p-picklist-header" *ngIf="sourceHeader || sourceHeaderTemplate">
                    <div class="p-picklist-title" *ngIf="!sourceHeaderTemplate">{{sourceHeader}}</div>
                    <ng-container *ngTemplateOutlet="sourceHeaderTemplate"></ng-container>
                </div>
                <div class="p-picklist-filter-container" *ngIf="filterBy && showSourceFilter !== false">
                    <div class="p-picklist-filter">
                        <input #sourceFilter type="text" role="textbox" (keyup)="onFilter($event,source,SOURCE_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="sourceFilterPlaceholder" [attr.aria-label]="ariaSourceFilterLabel">
                        <span class="p-picklist-filter-icon pi pi-search"></span>
                    </div>
                </div>

                <ul #sourcelist class="p-picklist-list p-picklist-source" cdkDropList [cdkDropListData]="source" (cdkDropListDropped)="onDrop($event, SOURCE_LIST)"
                    [ngStyle]="sourceStyle" role="listbox" aria-multiselectable="multiple">
                    <ng-template ngFor let-item [ngForOf]="source" [ngForTrackBy]="sourceTrackBy || trackBy" let-i="index" let-l="last">
                        <li [ngClass]="{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}" pRipple cdkDrag [cdkDragData]="item" [cdkDragDisabled]="!dragdrop"
                            (click)="onItemClick($event,item,selectedItemsSource,onSourceSelect)" (dblclick)="onSourceItemDblClick()" (touchend)="onItemTouchEnd()" (keydown)="onItemKeydown($event,item,selectedItemsSource,onSourceSelect)"
                            *ngIf="isItemVisible(item, SOURCE_LIST)" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsSource)">
                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>
                        </li>
                    </ng-template>
                    <ng-container *ngIf="isEmpty(SOURCE_LIST) && (emptyMessageSourceTemplate || emptyFilterMessageSourceTemplate)">
                        <li class="p-picklist-empty-message" *ngIf="!filterValueSource || !emptyFilterMessageSourceTemplate">
                            <ng-container *ngTemplateOutlet="emptyMessageSourceTemplate"></ng-container>
                        </li>
                        <li class="p-picklist-empty-message" *ngIf="filterValueSource">
                            <ng-container *ngTemplateOutlet="emptyFilterMessageSourceTemplate"></ng-container>
                        </li>
                    </ng-container>
                </ul>
            </div>
            <div class="p-picklist-buttons p-picklist-transfer-buttons">
                <button type="button" pButton pRipple icon="pi pi-angle-right" [disabled]="disabled" (click)="moveRight()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-right" [disabled]="disabled" (click)="moveAllRight()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-left" [disabled]="disabled" (click)="moveLeft()"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-left" [disabled]="disabled" (click)="moveAllLeft()"></button>
            </div>
            <div class="p-picklist-list-wrapper p-picklist-target-wrapper">
                <div class="p-picklist-header" *ngIf="targetHeader || targetHeaderTemplate">
                    <div class="p-picklist-title" *ngIf="!targetHeaderTemplate">{{targetHeader}}</div>
                    <ng-container *ngTemplateOutlet="targetHeaderTemplate"></ng-container>
                </div>
                <div class="p-picklist-filter-container" *ngIf="filterBy && showTargetFilter !== false">
                    <div class="p-picklist-filter">
                        <input #targetFilter type="text" role="textbox" (keyup)="onFilter($event,target,TARGET_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="targetFilterPlaceholder" [attr.aria-label]="ariaTargetFilterLabel">
                        <span class="p-picklist-filter-icon pi pi-search"></span>
                    </div>
                </div>
                <ul #targetlist class="p-picklist-list p-picklist-target" cdkDropList [cdkDropListData]="target" (cdkDropListDropped)="onDrop($event, TARGET_LIST)"
                    [ngStyle]="targetStyle" role="listbox" aria-multiselectable="multiple">
                    <ng-template ngFor let-item [ngForOf]="target" [ngForTrackBy]="targetTrackBy || trackBy" let-i="index" let-l="last">
                        <li [ngClass]="{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}" pRipple cdkDrag [cdkDragData]="item" [cdkDragDisabled]="!dragdrop"
                            (click)="onItemClick($event,item,selectedItemsTarget,onTargetSelect)" (dblclick)="onTargetItemDblClick()" (touchend)="onItemTouchEnd()" (keydown)="onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)"
                            *ngIf="isItemVisible(item, TARGET_LIST)" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsTarget)">
                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>
                        </li>
                    </ng-template>
                    <ng-container *ngIf="isEmpty(TARGET_LIST) && (emptyMessageTargetTemplate || emptyFilterMessageTargetTemplate)">
                        <li class="p-picklist-empty-message" *ngIf="!filterValueTarget || !emptyFilterMessageTargetTemplate">
                            <ng-container *ngTemplateOutlet="emptyMessageTargetTemplate"></ng-container>
                        </li>
                        <li class="p-picklist-empty-message" *ngIf="filterValueTarget">
                            <ng-container *ngTemplateOutlet="emptyFilterMessageTargetTemplate"></ng-container>
                        </li>
                    </ng-container>
                </ul>
            </div>
            <div class="p-picklist-buttons p-picklist-target-controls" *ngIf="showTargetControls">
                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)"></button>
            </div>
        </div>
    `,
      changeDetection: i0.ChangeDetectionStrategy.OnPush,
      encapsulation: i0.ViewEncapsulation.None,
      styleUrls: ["./picklist.css"]
    }]
  }],
  ctorParameters: function () {
    return [{
      type: i0.ElementRef
    }, {
      type: i0.ChangeDetectorRef
    }, {
      type: i1.FilterService
    }];
  },
  propDecorators: {
    source: [{
      type: i0.Input
    }],
    target: [{
      type: i0.Input
    }],
    sourceHeader: [{
      type: i0.Input
    }],
    targetHeader: [{
      type: i0.Input
    }],
    responsive: [{
      type: i0.Input
    }],
    filterBy: [{
      type: i0.Input
    }],
    filterLocale: [{
      type: i0.Input
    }],
    trackBy: [{
      type: i0.Input
    }],
    sourceTrackBy: [{
      type: i0.Input
    }],
    targetTrackBy: [{
      type: i0.Input
    }],
    showSourceFilter: [{
      type: i0.Input
    }],
    showTargetFilter: [{
      type: i0.Input
    }],
    metaKeySelection: [{
      type: i0.Input
    }],
    dragdrop: [{
      type: i0.Input
    }],
    style: [{
      type: i0.Input
    }],
    styleClass: [{
      type: i0.Input
    }],
    sourceStyle: [{
      type: i0.Input
    }],
    targetStyle: [{
      type: i0.Input
    }],
    showSourceControls: [{
      type: i0.Input
    }],
    showTargetControls: [{
      type: i0.Input
    }],
    sourceFilterPlaceholder: [{
      type: i0.Input
    }],
    targetFilterPlaceholder: [{
      type: i0.Input
    }],
    disabled: [{
      type: i0.Input
    }],
    ariaSourceFilterLabel: [{
      type: i0.Input
    }],
    ariaTargetFilterLabel: [{
      type: i0.Input
    }],
    filterMatchMode: [{
      type: i0.Input
    }],
    breakpoint: [{
      type: i0.Input
    }],
    onMoveToSource: [{
      type: i0.Output
    }],
    onMoveAllToSource: [{
      type: i0.Output
    }],
    onMoveAllToTarget: [{
      type: i0.Output
    }],
    onMoveToTarget: [{
      type: i0.Output
    }],
    onSourceReorder: [{
      type: i0.Output
    }],
    onTargetReorder: [{
      type: i0.Output
    }],
    onSourceSelect: [{
      type: i0.Output
    }],
    onTargetSelect: [{
      type: i0.Output
    }],
    onSourceFilter: [{
      type: i0.Output
    }],
    onTargetFilter: [{
      type: i0.Output
    }],
    listViewSourceChild: [{
      type: i0.ViewChild,
      args: ["sourcelist"]
    }],
    listViewTargetChild: [{
      type: i0.ViewChild,
      args: ["targetlist"]
    }],
    sourceFilterViewChild: [{
      type: i0.ViewChild,
      args: ["sourceFilter"]
    }],
    targetFilterViewChild: [{
      type: i0.ViewChild,
      args: ["targetFilter"]
    }],
    templates: [{
      type: i0.ContentChildren,
      args: [i1.PrimeTemplate]
    }]
  }
});

class PickListModule {}

exports.PickListModule = PickListModule;
PickListModule.ɵfac = i0.ɵɵngDeclareFactory({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickListModule,
  deps: [],
  target: i0.ɵɵFactoryTarget.NgModule
}), PickListModule.ɵmod = i0.ɵɵngDeclareNgModule({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickListModule,
  declarations: [PickList],
  imports: [i3.CommonModule, i4.ButtonModule, i1.SharedModule, i5.RippleModule, i2.DragDropModule],
  exports: [PickList, i1.SharedModule, i2.DragDropModule]
}), PickListModule.ɵinj = i0.ɵɵngDeclareInjector({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickListModule,
  imports: [[i3.CommonModule, i4.ButtonModule, i1.SharedModule, i5.RippleModule, i2.DragDropModule], i1.SharedModule, i2.DragDropModule]
}), i0.ɵɵngDeclareClassMetadata({
  minVersion: "12.0.0",
  version: "12.0.5",
  ngImport: i0,
  type: PickListModule,
  decorators: [{
    type: i0.NgModule,
    args: [{
      imports: [i3.CommonModule, i4.ButtonModule, i1.SharedModule, i5.RippleModule, i2.DragDropModule],
      exports: [PickList, i1.SharedModule, i2.DragDropModule],
      declarations: [PickList]
    }]
  }]
});
